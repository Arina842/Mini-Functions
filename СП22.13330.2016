# @staticmethod

import numpy as np
def define_phi(stratigraphic_index,type_ground,e,I_L=None, I_r= None):
    """
    Логика - поступает статиграфический индекс, пески определяются по таблице А1, глины по таблице А2,
    Органика по таблице А3
    Нормативный документ: СП 22.13330.2016

    Данные из таблиц относятся к каждому типу грунта:
    1. Песок гравелистый — Таблица А.1
    2. Песок крупный — Таблица А.1
    3. Песок средней крупности — Таблица А.1
    4. Песок мелкий — Таблица А.1
    5. Песок пылеватый — Таблица А.1
    6. Супесь — Таблица А.2
    7. Суглинок — Таблица A.2
    8. Глина — Таблица A.2
    9. Торф — Таблица A.4

    Дополнительная информация
    Четвертичные:
    g Ледниковые (гляциальные): gms, gdn
    t Техногенные
    pr Пролювий
    a Аллювий
    l Озерные
    m морские
    b Биогенные
    f флювиогляциальные
    lg
    f
    m
    Остальные:
    K - меловой
    J - юрский: Jv, Jox, Jbt
    С - карбон (каменноугольный)
    все ['t','pr','a','l','b','lg','f','g','gms','gdn','C','K','J','Jv','Jox','Jbt','m','лёсc','лёссовидный']
    I_r=0.1,I_L=0.3
    """

    def validate_input(type_ground=None, e=None, stratigraphic_index=None):
        # Проверка на наличие всех параметров
        if type_ground is None:
            return print("Ошибка: отсутствует параметр type_ground")
        if e is None:
            return print("Ошибка: отсутствует параметр e")
        if stratigraphic_index is None:
            return print("Ошибка: отсутствует параметр stratigraphic_index")

        # Проверка типов данных
        if not isinstance(type_ground, int):
            return print("Ошибка: параметр type_ground должен быть числом (int или float)")
        if not isinstance(e, float):
            return print("Ошибка: параметр e должен быть числом (int или float)")
        if not isinstance(stratigraphic_index, str):
            return print("Ошибка: параметр stratigraphic_index должен быть строкой (str)")

        # Проверка условий
        if not (1 <= type_ground <= 9):
            return print("Ошибка: неправильно задан параметр type_ground (допустимо 1-9)")
        if stratigraphic_index not in ['t','pr','e','a','l','b','lg','f','g','gms','gdn','C','K','J','Jv','Jox','Jbt','m','лёсc','лёссовидный']:
            return print("Ошибка: не входящий в верный диапазон stratigraphic_index")


        # Если все проверки пройдены
        return True

    def table_1( type_ground:int, e: float) -> int:
        """
        Параметры:
        - type_ground: подтип песка (1-гравелистый, 2-крупный, 3-средней крупности, 4-мелкий, 5-пылеватый)
        - e: коэффициент пористости
        Возвращает: угол внутреннего трения φ (округленный до целого)
        """
        data = {
            1: {"e": np.array([0.45, 0.55, 0.65]), "phi": np.array([43, 40, 38])},
            2: {"e": np.array([0.45, 0.55, 0.65]), "phi": np.array([43, 40, 38])},
            3: {"e": np.array([0.45, 0.55, 0.65]), "phi": np.array([40, 38, 35])},
            4: {"e": np.array([0.45, 0.55, 0.65, 0.75]), "phi": np.array([38, 36, 32, 28])},
            5: {"e": np.array([0.45, 0.55, 0.65, 0.75]), "phi": np.array([36, 34, 30, 26])}
        }
        # нахождение нужной строчки в словаре data по типу грунта
        e_values = data[type_ground]["e"]
        phi_values = data[type_ground]["phi"]

        # проверка, что поданный коэффициент пористости e входит в диапазон
        if e < np.max(e_values) and e>np.min(e_values):
            # Интерполяция
            e_values_interp = np.round(np.linspace(np.min(e_values), np.max(e_values), int((np.max(e_values)-np.min(e_values))*100)),2)
            phi_values_interp = np.round(np.interp(e_values_interp,e_values, phi_values))
            index=np.where(e_values_interp==e)
            fi=int(phi_values_interp[index])
        else:
            print('Неверно задан коэффициент пористости e')
            fi=None
        # print(int(phi_values_interp[index]))
        # print( np.where(e_values_interp==e))
        # print(phi_values_interp[index])
        print(fi)
        return fi


    def table_2(type_ground: str, e: float, I_L: float) -> int:
        """
        Параметры:
        - type_ground: подтип песка (6-супесь, 7-суглинок, 8-глина)
        - I_L: показатель текучести
        - e: коэффициент пористости
        Возвращает: угол внутреннего трения φ (округленный до целых)

        Коды подтипов:
        61: Супесь (0 ≤ I_L < 0.25)
        62: Супесь (0.25 ≤ I_L < 0.75)
        71: Суглинок (0 ≤ I_L < 0.25)
        72: Суглинок (0.25 ≤ I_L < 0.5)
        73: Суглинок (0.5 ≤ I_L < 0.75)
        81: Глина (0 ≤ I_L < 0.25)
        82: Глина (0.25 ≤ I_L < 0.5)
        83: Глина (0.5 ≤ I_L < 0.75)
        """

        data = {
            # Супесь
            61: {"e": [0.45, 0.55, 0.65, 0.75], "phi": [30, 29, 27, 24]},  # 0 ≤ I_L < 0.25
            62: {"e": [0.45, 0.55, 0.65, 0.75, 0.85], "phi": [28, 26, 24, 21, 18]},  # 0.25 ≤ I_L < 0.75

            # Суглинок
            71: {"e": [0.45, 0.55, 0.65, 0.75, 0.85, 0.95], "phi": [26, 25, 24, 23, 22, 20]},  # 0 ≤ I_L < 0.25
            72: {"e": [0.45, 0.55, 0.65, 0.75, 0.85, 0.95], "phi": [24, 23, 22, 21, 19, 17]},  # 0.25 ≤ I_L < 0.5
            73: {"e": [0.65, 0.75, 0.85, 0.95, 1.05], "phi": [19, 18, 16, 14, 12]},  # 0.5 ≤ I_L < 0.75

            # Глина
            81: {"e": [0.55, 0.65, 0.75, 0.85, 0.95, 1.05], "phi": [21, 20, 19, 18, 16, 14]},  # 0 ≤ I_L < 0.25
            82: {"e": [ 0.65, 0.75, 0.85, 0.95,1.05], "phi": [18, 17, 16, 14, 11]},  # 0.25 ≤ I_L < 0.5
            83: {"e": [0.65, 0.75, 0.85, 0.95,1.05], "phi": [15, 14, 12, 10,7]},  # 0.5 ≤ I_L < 0.75
        }
        if I_L>=0 and I_L<=0.25:
            type_ground=type_ground*10+1
        elif I_L>0.25 and I_L<=0.75 and type_ground==6:
            type_ground = 62
        elif I_L > 0.25 and I_L <= 0.5:
            type_ground = type_ground * 10 + 2
        elif  I_L > 0.5 and I_L <= 0.75:
            type_ground = type_ground * 10 + 3
        else: print('Неверные данные показателя текучести I_L для глин')

        if type_ground >60:
            # нахождение нужной строчки в словаре data по типу грунта
            e_values = data[type_ground]["e"]
            phi_values = data[type_ground]["phi"]
            # проверка, что поданный коэффициент пористости e входит в диапазон
            if e < np.max(e_values) and e > np.min(e_values) :
                # Интерполяция
                e_values_interp = np.round(
                    np.linspace(np.min(e_values), np.max(e_values), int((np.max(e_values) - np.min(e_values)) * 100)), 2)
                phi_values_interp = np.round(np.interp(e_values_interp, e_values, phi_values))
                index = np.where(e_values_interp == e)
                fi = int(phi_values_interp[index])
            else:
                print('Неверно задан коэффициент пористости e')
                fi = None
        else:
            fi=None

        return fi

    # def table_b3(soil_subtype: int, e: float) -> int:
    #     return None
    def table_4(type_ground: str,I_L: float, I_r: float, e: float) -> int:
        """
        Параметры:
        - I_L: показатель текучести
        - I_r: степень заторфованности (0.05-0.1 или 0.1-0.25)
        - e: коэффициент пористости
        Возвращает: угол внутреннего трения φ
        """
        if I_r>=0.05 and I_r<=0.1:
            data = {
                (0, 0.25): {"e": [ 1.05], "phi": [ 15]},
                (0.25, 0.5): {"e": [ 1.05,1.15,1.25,1.35], "phi": [15, 14, 13, 12]},
                (0.5, 0.75): {"e": [ 1.05,1.15,1.25,1.35], "phi": [15, 14, 13, 12]},
                (0.75, 1.00): {"e": [0.95], "phi": [18,18,17]}
            }
        if I_r>0.1 and I_r<=0.25:
            data = {
                (0, 0.25): {"e": [0.65, 0.75, 0.85, 0.95], "phi": [21, 20, 18, 16]},
                (0.25, 0.5): {"e": [0.65, 0.75, 0.85, 0.95], "phi": [21, 20, 18, 16]},
                (0.5, 0.75): {"e": [0.65, 0.75, 0.85, 0.95], "phi": [21, 20, 18, 16]},
                (0.75, 1.00): {"e": [0.95], "phi": [18]}}
        # Выбор диапазона I_L
        I_L_range = next((k for k in data.keys() if k[0] <= I_L < k[1]), None)
        i
        e_values = data[I_L_range]["e"]
        phi_values = data[I_L_range]["phi"]

        # Интерполяция
        for i in range(len(e_values) - 1):
            if e_values[i] <= e <= e_values[i + 1]:
                return round(phi_values[i] + (phi_values[i + 1] - phi_values[i]) * (e - e_values[i]) / (
                            e_values[i + 1] - e_values[i]))

        return round(phi_values[0] if e < e_values[0] else phi_values[-1])

    def table_5(type_ground: int, e: float) -> int:
        """
        Параметры:
        - type_ground: 1-дресвянистые, 2-крупные, 3-средней крупности,4-пылеватые
        - e: коэффициент пористости
        Возвращает: φ (округленный)
        """
        data = {
            1: {"e": [0.45, 0.55, 0.65, 0.75, 0.85, 1.00], "phi": [34, 31, 28, 25, 23, 21]},
            2: {"e": [0.45, 0.55, 0.65, 0.75, 0.85], "phi": [32, 30, 27, 24, 22]},
            3: {"e": [0.45, 0.55, 0.65, 0.75, 0.85], "phi": [32, 30, 27, 24, 22]},
            4: {"e": [0.45, 0.55, 0.65, 0.75, 0.85, 1.0, 1.2], "phi": [32, 30, 27, 24, 22, 20, 18]}
        }
        # нахождение нужной строчки в словаре data по типу грунта
        e_values = data[type_ground]["e"]
        phi_values = data[type_ground]["phi"]

        # проверка, что поданный коэффициент пористости e входит в диапазон
        if e < np.max(e_values) and e > np.min(e_values):
            # Интерполяция
            e_values_interp = np.round(
                np.linspace(np.min(e_values), np.max(e_values), int((np.max(e_values) - np.min(e_values)) * 100)), 2)
            phi_values_interp = np.round(np.interp(e_values_interp, e_values, phi_values))
            index = np.where(e_values_interp == e)
            fi = int(phi_values_interp[index])
        else:
            print('Неверно задан коэффициент пористости e')
            fi = None
        return fi

    def table_6(soil_subtype: int, e: float, char_type: str) -> float:
        """
        Параметры:
        - soil_subtype: код подтипа грунта (см. описание ниже)
        - e: коэффициент пористости
        - char_type: тип характеристики ('c', 'phi', 'E')
        Возвращает: значение характеристики (округленное до целого)

        Коды подтипов:
        601: Супесь (I_L < 0)
        602: Супесь (0 ≤ I_L ≤ 0.75)
        711: Суглинок (0 ≤ I_L ≤ 0.25)
        712: Суглинок (0.25 < I_L ≤ 0.5)
        713: Суглинок (0.5 < I_L ≤ 0.75)
        811: Глина (0 ≤ I_L ≤ 0.25)
        812: Глина (0.25 < I_L ≤ 0.5)
        """

        data = {
            # Супеси
            601: {  # I_L < 0
                "e": [0.55, 0.65, 0.75, 0.85, 0.95, 1.05],
                "c": [47, 44, 42, 41, 40, 39],
                "phi": [34, 31, 28, 26, 25, 24],
                "E": [37, 30, 25, 20, 15, 10]
            },
            602: {  # 0 ≤ I_L ≤ 0.75
                "e": [0.55, 0.65, 0.75, 0.85, 0.95],
                "c": [42, 41, 40, 39, 38],
                "phi": [31, 28, 26, 25, 24],
                "E": [25, 18, 14, 12, 11]
            },

            # Суглинки
            711: {  # 0 ≤ I_L ≤ 0.25
                "e": [0.55, 0.65, 0.75, 0.85, 0.95, 1.05],
                "c": [57, 55, 54, 53, 52, 51],
                "phi": [24, 23, 22, 21, 20, 19],
                "E": [27, 25, 23, 21, 19, 17]
            },
            712: {  # 0.25 < I_L ≤ 0.5
                "e": [0.65, 0.75, 0.85, 0.95, 1.05],
                "c": [48, 46, 44, 42, 40],
                "phi": [22, 21, 20, 19, 18],
                "E": [19, 16, 14, 13, 12]
            },
            713: {  # 0.5 < I_L ≤ 0.75
                "e": [0.75, 0.85, 0.95, 1.05, 1.2],
                "c": [41, 36, 32, 29, 25],
                "phi": [20, 19, 18, 17, 16],
                "E": [15, 13, 11, 10, 9]
            },

            # Глины
            811: {  # 0 ≤ I_L ≤ 0.25
                "e": [0.65, 0.75, 0.85, 0.95, 1.05],
                "c": [62, 60, 58, 57, 56],
                "phi": [20, 19, 18, 17, 16],
                "E": [19, 18, 17, 16, 15]
            },
            812: {  # 0.25 < I_L ≤ 0.5
                "e": [0.65, 0.75, 0.85, 0.95],
                "c": [54, 50, 47, 44],
                "phi": [17, 15, 13, 12],
                "E": [14, 12, 10, 9]
            }
        }

        if soil_subtype not in data:
            raise ValueError("Недопустимый код подтипа грунта")

        e_values = data[soil_subtype]["e"]
        char_values = data[soil_subtype][char_type]

        # Удаление значений None (если есть пропуски)
        valid_e = [e_val for e_val, val in zip(e_values, char_values) if val is not None]
        valid_char = [val for val in char_values if val is not None]

        # Проверка границ
        if e < min(valid_e):
            return round(valid_char[0])
        elif e > max(valid_e):
            return round(valid_char[-1])

        # Линейная интерполяция
        for i in range(len(valid_e) - 1):
            if valid_e[i] <= e <= valid_e[i + 1]:
                x0, x1 = valid_e[i], valid_e[i + 1]
                y0, y1 = valid_char[i], valid_char[i + 1]
                interpolated = y0 + (y1 - y0) * (e - x0) / (x1 - x0)
                return round(interpolated)

        return round(valid_char[-1])

    #     # Логика аналогична таблице Б1
    # def table_b8(soil_subtype: int, e: float) -> int:
    #     """
    #     Параметры:
    #     - soil_subtype: 1-средней крупности, 2-мелкие, 3-пылеватые
    #     - e: коэффициент пористости
    #     Возвращает: угол внутреннего трения φ
    #     """
    #     data = {
    #         1: {"e": [0.45, 0.55, 0.65, 0.75], "phi": [39, 37, 33, 30]},
    #         2: {"e": [0.45, 0.55, 0.65, 0.75, 0.85], "phi": [36, 33, 30, 27, 25]},
    #         3: {"e": [0.55, 0.65, 0.75, 0.85, 0.95], "phi": [33, 29, 25, 23, 20]}
    #     }
    #
    #     e_values = data[soil_subtype]["e"]
    #     phi_values = data[soil_subtype]["phi"]
    #
    #     # Интерполяция
    #     for i in range(len(e_values) - 1):
    #         if e_values[i] <= e <= e_values[i + 1]:
    #             return round(phi_values[i] + (phi_values[i + 1] - phi_values[i]) * (e - e_values[i]) / (
    #                         e_values[i + 1] - e_values[i]))
    #
    #     return round(phi_values[0] if e < e_values[0] else phi_values[-1])
    #Проверка и вызов функции
    if validate_input(type_ground, e, stratigraphic_index)==True:
        if stratigraphic_index in ['t','pr','a','l','b','lg','f','g','gms','gdn','m']:
            if type_ground in [1,2,3,4]:
                fi=table_1(type_ground,e)
            elif type_ground in [5,6,7,8,9]:
                fi=table_2(type_ground,e,I_L)
            elif I_L >= 0 and Ir > 0 and type_ground in [6, 7, 8, 9]:
                fi = table_4(type_ground, e, I_L, Ir)
        elif stratigraphic_index in ['e'] and I_L == None:
            fi = table_5(type_ground, e)



        print(fi)

def tests():
    '''
     Данные из таблиц относятся к каждому типу грунта:
    1. Песок гравелистый — Таблица А.1
    2. Песок крупный — Таблица А.1
    3. Песок средней крупности — Таблица А.1
    4. Песок мелкий — Таблица А.1
    5. Песок пылеватый — Таблица А.1
    6. Супесь — Таблица А.2
    7. Суглинок — Таблица A.2
    8. Глина — Таблица A.2
    9. Торф — Таблица A.4
    '''

    # # Обработка ошибок
    # define_phi(stratigraphic_index='a', type_ground=0, e=0.76) #   Ошибка: неправильно задан параметр type_ground (допустимо 1-9)
    # define_phi(stratigraphic_index='7', type_ground=6,e=0.76)  # Ошибка: не входящий в верный диапазон stratigraphic_index
    # define_phi(stratigraphic_index='a', type_ground=4, e=0.76) #  Таблица 1 - Неверно задан коэффициент пористости e
    # define_phi(stratigraphic_index='a', type_ground=6, e=0.86, I_L=0.5) #  Таблица 2 - Неверно задан коэффициент пористости e
    # define_phi(stratigraphic_index='a', type_ground=6, e=0.66, I_L=0.85)  #  Таблица 2 - Неверные данные показателя текучести I_L для глин


    # # Примеры
    # define_phi(stratigraphic_index='a',type_ground=2, e=0.48)  #  Таблица 1 - 42
    # define_phi(stratigraphic_index='a',type_ground=4, e=0.66)  #  Таблица 1 - 32
    # define_phi(stratigraphic_index='a', type_ground=6, e=0.76, I_L=0.5) #  Таблица 2 - 21
    # define_phi(stratigraphic_index='a', type_ground=7, e=0.76, I_L=0.75)  # Таблица 2 - 18
    # define_phi(stratigraphic_index='a', type_ground=6, e=0.80, I_L=0.75)  # Таблица 2 - 20
    # define_phi(stratigraphic_index='e', type_ground=2, e=0.80)  # Таблица 5 - 23
    define_phi(stratigraphic_index='a', type_ground=6, e=0.75, I_L=0.75,I_r=0.1)  # Таблица 2 - 20

tests()

